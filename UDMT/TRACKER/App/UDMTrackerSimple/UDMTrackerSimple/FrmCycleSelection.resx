<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAIAICAAAAEAGACoDAAAJgAAABAQAAABAAgAaAUAAM4MAAAoAAAAIAAAAEAAAAABABgAAAAAAAAM
        AAAAAAAAAAAAAAAAAAAAAAAA2Lelvo5zwpR6wZN5wZN5wZN5wZN5wZN5wZN5wZN5wZN5wZN5wZN5wZN5
        wZN5wZN5wZN5wZN5wZN5wZN5wZN5wZN5wZN5wZN5wZN5wZN5wZN5wZN5wZN5wpR6vo5z2Lilvo5zjEQb
        k08nkk0lkk0lkk0lkk0lkk0lkk0lkk0lkk0lkk0lkk0lkk0lkk0lkk0lkk0lkk0lkk0lkk0lkk0lkk0l
        kk0lkk0lkk0lkk0lkk0lkk0lkk0lk08njEQbvo5zwpR6k08nmVkzmFcxmFcymVgzmFcymVgzmVgymFcy
        mVcymFcymVgymFcymFcymFcymVgzmFcymVgymVgzmFcymVgzmVgymVgzmFcymVgymVgymFcymFcxmVkz
        k08nwpR6wZN5kk0lmFcxl1UvllQuk04mllQuk08nlFEpl1QulVIrlVIrlVIrlVIslVIsllMslFAqllMs
        lFEqkk0mlVIrk08nlFAplFApllMtlVErlVIrlVIsl1UvmFcxkk0lwZN5wZN5kk0lmFcyllMtmlo1qnVW
        mlk0qXJSo2lHmVk0oWRCn2E+oGNAnmA9nmA9nF05o2hHnV46omdFrHdZnmE+p3BQpGpIo2lIm1w3oGRC
        oGNAnmE9llQtmFcykk0lwZN5wZN5kk0lmVgzk04nxJ+KwpuFza6cy6mWu5B4zq+d0bWk2L+xzKuZu492
        wZqDyqiVz7Cf28S33Ma5sH5h1Lmqu5B30LKhyaiV07enyqmVzrCew52Hkkwkmlk0kk0lwZN5wZN5kk0l
        mVgzlFAp0LKhrHha38zAxJ6ItYZr4s/E3sm9wZqD4tDFuo51x6OPsoFly6qY2L+xyqmWmFYwtodsuo92
        v5eAvJJ6wpuFzayay6qXs4Jmk04mmVgzkk0lwZN5wZN5kk0lmVcylVIss4Nopm1MuYxyvZR7uIxxr3xf
        vJB3nF05xJ6JuItxwZiBmVk0j0gfv5Z+oGRBllMtlFEql1YwlVIrllMtk04nlVIslVIslVErl1UwmFcx
        kk0lwZN5wZN5kk0lmFcxl1Ywkk4mkk4nkk0lkUwkkUwjlE8okUsjk1Aoj0gfkk0mk08olVIrlVErllMt
        lVErl1YwllMsllIsmFYwk08ollQul1UwlVIrl1Uvl1UvmFcxkk0lwZN5wZN5kk0lmFcxl1Qumlk0oWVC
        mFcynV87n2E/lVMsmlo1pGtKn2M/nV46k04noWVCo2lHl1UwoWVClVIrn2I/nmA9llQuqHFRnmA9mFYw
        oGRCmFYxl1UvmFcxkk0lwZN5wZN5kk0lmVgzlFAopWxL9O3qmFcyyqmW2cCzjkUc5tfO4c3C7uTevpR9
        uo509vDt49LHrnte6NnRtYds8+vmtoht5NLI6NnR0bWkqXJT8enloWVDlVIrmVgykk0lwZN5wZN5kk0l
        mVgzk08opm1M+PPwmFcyza2b172viD0R38u/y6qX7eHbx6SQ6t3WtIVqi0IXoWRC8enk+vf1s4NouItx
        9e/sqXJTrHdYr3xf8+znmls2lE8omVgzkk0lwZN5wZN5kk0lmVgzlFAppm5N9/Lvmlk0yqiU8unloGVD
        r3teyKSQ9/LvvpR94MzB1bqrrHhZqHFR7eLb7eHax6OOsX9i+/j32MCx9e/su5B3+PTyvpZ/mVk0mFYw
        kk0mwZN5wZN5kk0lmVgzkUwkomdF9/LvmFgytYds49HHzKuYt4hu38vA1r2um1w4o2lH38u/3sm9qXNT
        7eHaqXNT3ce6qXJTvpZ+4c/EwpuEoWVC28W43ce7qnNUlFApk04nwZN5wZN5k08ok04mu5F46t3W9/Lv
        6tzUuItyikEWlFApk08nkkwkkUsjllMtlVEqkEohj0gfnF049e/ro2lIjkUcmFYxkUwkkk0mkkwkllMt
        kUwkkEsillMtmFcykk0lwZN5wZN5kk0ml1Uvn2NAp3FRomZEqHFRn2NAl1YvmFcxmFYxmFcxmFcyl1Uw
        mFYwmVgyl1YwmVk0tYZrnF04l1Uvl1UvmFcxmFcxmFcxl1UwmFcxmFcxl1UvmFcxkk0lwZN5wZN5kk0l
        mFcylVIrk08nlFEqk08nlVIrl1Uwl1Uvl1Uvl1Uvl1Uvl1Uvl1Uvl1Uvl1Uvl1QukUskllQtl1Uvl1Uv
        l1Uvl1Uvl1Uvl1Uvl1Uvl1Uvl1UvmFcxkk0lwZN5wZN5kk0lmFcxmFYwmFYwmFYwmVgymVgzmVgymFcy
        l1Uvl1UvmVcymVgymVgymVgymFYwl1UvmFcymVgyl1Uvl1UwmVgyl1Ywl1UvmVgyl1Ywl1Uvl1UvmFcx
        kk0lwZN5wZN5kk0lmFcxl1Uvl1Uvl1YwkkwkjkcejkcdkUwkl1Ywl1UvkUwkj0gejkcdj0gflVErmFcx
        llMtkEohllQtllQukEkgllMtllQukEohlVIrl1Ywl1UvmFcxkk0lwZN5wZN5kk0lmFcxl1UvmFYwlFAo
        tolu4MvA4M3BuYxylFApmFYwzq+d4MzB4s/F0LOioGRBkUsjoWZD2MCxoGRBnV882cG0oWVDnWA828W4
        qnRVk08nmFYxmFcxkk0lwZN5wZN5kk0lmFcxmFcxkkwls4No////28S31bur////uY10kEoi9e7q5dXM
        yaiU8+rm9/PwoWVDo2lH////omdGu492////wpyGn2I/////tohtkUsjmFcymFcxkk0lwZN5wZN5kk0l
        mFcxmVgyj0ce1ryu7uLcjUQbiD0S4tDF4tDFjkYd9vDtxJ6JhDYJl1Qu9O3q2cGznmE+/Pv6pWtK4c7D
        8url49HHpGtL////tYVqkUsjmFcymFcxkk0lwZN5wZN5kk0lmFcxmVgyjkce3ci849LIkk0lkUsi2cCy
        6dvTjkce9vHuyqmVk08nkEsi07eo8OfipWxL+PPwu492+PTxrXpb7eLbv5Z+/Pr5tohtkUsjmFcymFcx
        kk0lwZN5wZN5kk0lmFcxmVgyjkce3sm85dXLkUwkj0kg28S26NnRjkce9/HuyKaRjUUbjEMZ3ce67eHa
        pGpJ9e7p49DG6NnRi0IX1ryt59fO+fXytohukUsjmFcymFcxkk0lwZN5wZN5kk0lmFcxmVgyjkce3sm9
        5dXLkUwkj0kg2sO26drSj0ce9vHtza2bllMtwJiB////yaeTn2I/+vf1////wZqEi0EXsH1g+vf2////
        tYZrkUsjmFcymFcxkk0lwZN5wZN5kk0lmFcxmVgyj0ce3ce649LIkUwkkEkg2cGz59fPkEoh7uPc/fv6
        9vDt/v3917+wllMtpGpI/fv69/LwoGNBlVIrl1Qu6NrR////s4JmkUwkmFcymFcxkk0lwZN5wZN5kk0l
        mFcxl1UvllMtoGNAoWRCllQullQtn2I/oWVCllQtomVEpWxLpW1MnmA8kUwkllIsmVgzpGpJoWRCllQu
        l1YwllMtnmA9pWtLmlo2llQul1UvmFcxkk0lwZN5wZN5kk0lmFcxl1Uvl1UvlVIrlVErl1Uvl1UvlVIr
        lVEql1UvlFEqk08ok08olVIrmFcxl1Ywl1QulFAplVEql1Uvl1Uvl1YwlVIrlE8ollQtl1Uvl1UvmFcx
        kk0lwZN5wZN5kk0lmFcxl1Uvl1UvmFYwmFYwl1Uvl1UvmFYwmFYwl1UvmFYwmFYwmFYwmFYwl1Uvl1Uv
        l1UvmFYwmFYwl1Uvl1Uvl1UvmFYwmFYwl1Uvl1Uvl1UvmFcxkk0lwZN5wpR6k08nmVkzmFcxmFcxmFcx
        mFcxmFcxmFcxmFcxmFcxmFcxmFcxmFcxmFcxmFcxmFcxmFcxmFcxmFcxmFcxmFcxmFcxmFcxmFcxmFcx
        mFcxmFcxmFcxmVkzk08nwpR6vo5zjEQbk08nkk0lkk0lkk0lkk0lkk0lkk0lkk0lkk0lkk0lkk0lkk0l
        kk0lkk0lkk0lkk0lkk0lkk0lkk0lkk0lkk0lkk0lkk0lkk0lkk0lkk0lkk0lk08njEQbvo5z2Lilvo5z
        wpR6wZN5wZN5wZN5wZN5wZN5wZN5wZN5wZN5wZN5wZN5wZN5wZN5wZN5wZN5wZN5wZN5wZN5wZN5wZN5
        wZN5wZN5wZN5wZN5wZN5wZN5wZN5wpR6vo5z2LilAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAoAAAAEAAAACAAAAABAAgAAAAAAAAB
        AAAAAAAAAAAAAAABAAAAAAAAkU0lAMuqlgCSTSUAv5Z/AJRSKwCVUisAsYFlAKVsSwDCm4UAmFcxALWG
        awCpcE4AqHFRAMWgiwCqcVEAuItxAI9IIACsd1oA2L+xAK57XQCTTSYAvpV9ANvEtwCiZ0YAzq+dAJVS
        LADBmoMApmtJAN7JvQCna0kAtYZsAMOfiQDEn4kAqXBPAKpwTwCaWzUAt4pvAJxcOACORx4Aj0ceAJ9h
        PgCRTCQAkkwkAMuqmADNrpsAlFEqAJVRKgCygGQAzq+eAKZrSgDQs6EAt4RnAKlvTQCqcFAAmls2AI1G
        HACqdVYAx6SQAMikkADXvrAArXpcAMuplgCSTCUAk1AoAJVRKwDBmYIA0LOiAKlvTgC2iW4A07ioAJtb
        NwC6jnQA172uAJ5gPQCQSyMAkUsjAL2TegCTUCkAlFApAN3HugCkakkA0LKgALOEaQCXVS8AtIRpAMOd
        hgCnb08AxJ6JAJpaNQDUuKkAjUUbAI5GHgCcXzsA8+vmAJBKIQCteVsAoGRBAL2TewCTTycAza2bAJRQ
        KgDAmIEAs4NnAJdVMADDnYcAqG5NAJlZMwC2iG0Amlo2AJtaNgDGoo0Auo52AJ5fPADJp5MAkEoiAJFK
        IgC9knkAk08oAJRPKACwfmIAv5d/ANzGuQDPsZ8A7ODZAJZULgC0g2gAp21LAN/LvwC1h2sA0ralAJlZ
        NAC3iG4AqnJRAI9JIACQSSAAk04mAKNoRgCVUywAllMsALOCZgClbUwAw5yGAKhtTACYWDIAw52JALWH
        bAC2h2wAi0MYAMWhjAC4jHIAuYxyAI9JIQC8kXgA2cCyAJJNJADbxbgAsoFkAJVTLQCWUy0AwpuEANK1
        pACZWDMAjEMZAKpxUACpclMAnV05AI5IHwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAADMdoyEhNSEhoyIhISKjGzMdKT5zcydKSiZKS14QSykdCxlSlh4D
        VC9lD5FvmJItIY5TJEEaaJCcYROMEQZfdkNDTmqhUyOPWEmKoWxnfC1Do4V4CIOgFjAKTz1IIB9bDiEp
        LJQNCCtoRxx0RW5CoX4xXAFECTaJiQdmTgl8golpQ3WaN3J8KoYuAkAuZIktQzQEU4AKnWtMCYyIUFZg
        h0OjJn1ZehUSORhXY3kYd6YihKKNCjwycZObgX9VeziXIg5aFZWLOkiZn1E7nl2kciIhTqVGbSUXDGRw
        JZ4obS0hHQBOP011AnIFYmJAFC0AHTMdIjRDCyEhNAshNEMiHTMAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
</value>
  </data>
</root>