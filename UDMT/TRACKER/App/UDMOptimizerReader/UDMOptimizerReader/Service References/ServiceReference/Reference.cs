//------------------------------------------------------------------------------
// <auto-generated>
//     이 코드는 도구를 사용하여 생성되었습니다.
//     런타임 버전:4.0.30319.42000
//
//     파일 내용을 변경하면 잘못된 동작이 발생할 수 있으며, 코드를 다시 생성하면
//     이러한 변경 내용이 손실됩니다.
// </auto-generated>
//------------------------------------------------------------------------------

namespace UDMOptimizerReader.ServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference.IMyService", CallbackContract=typeof(UDMOptimizerReader.ServiceReference.IMyServiceCallback))]
    public interface IMyService {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService/Connect")]
        void Connect(string sClient);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService/Disconnect")]
        void Disconnect(string sClient);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMyService/SendTimeLogSToServer")]
        void SendTimeLogSToServer(string[] saData);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMyService/SendEmergTimeLogSToServer")]
        void SendEmergTimeLogSToServer(string[] saData);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMyService/SendErrorTagListToServer")]
        void SendErrorTagListToServer(string[] saData);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMyService/SendStatusToServer")]
        void SendStatusToServer(string[] saData);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMyService/SendMessageToServer")]
        void SendMessageToServer(string[] saData);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMyServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService/Terminate")]
        void Terminate();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMyService/ReceiveCommStart")]
        void ReceiveCommStart(string[] saData);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMyService/ReceiveCommStop")]
        void ReceiveCommStop(string[] saData);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMyService/ReceiveTagList")]
        void ReceiveTagList(string[] saData);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMyService/ReceiveEmergTagList")]
        void ReceiveEmergTagList(string[] saData);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMyService/ReceiveCollectorList")]
        void ReceiveCollectorList(string[] saData);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMyServiceChannel : UDMOptimizerReader.ServiceReference.IMyService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MyServiceClient : System.ServiceModel.DuplexClientBase<UDMOptimizerReader.ServiceReference.IMyService>, UDMOptimizerReader.ServiceReference.IMyService {
        
        public MyServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public MyServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public MyServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public MyServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public MyServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void Connect(string sClient) {
            base.Channel.Connect(sClient);
        }
        
        public void Disconnect(string sClient) {
            base.Channel.Disconnect(sClient);
        }
        
        public void SendTimeLogSToServer(string[] saData) {
            base.Channel.SendTimeLogSToServer(saData);
        }
        
        public void SendEmergTimeLogSToServer(string[] saData) {
            base.Channel.SendEmergTimeLogSToServer(saData);
        }
        
        public void SendErrorTagListToServer(string[] saData) {
            base.Channel.SendErrorTagListToServer(saData);
        }
        
        public void SendStatusToServer(string[] saData) {
            base.Channel.SendStatusToServer(saData);
        }
        
        public void SendMessageToServer(string[] saData) {
            base.Channel.SendMessageToServer(saData);
        }
    }
}
